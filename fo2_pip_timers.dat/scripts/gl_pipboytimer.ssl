/*

   Adds a timer note to the PipBoy, similar to the water timer in Fo1.

   Works for:
      - The Modoc Slags quest,
      - the Klamath moonshine still,
      - and Mason's guard assignment in New Reno / Enclave encounter.

*/

/* Include Files */
#include "sfall/sfall.h"
#include "define.h"
#include "command.h"

/* Standard Script Procedures */
procedure start;

procedure GameModeChange_handler;
procedure SetGlobalVar_handler;
procedure pipboy_note_refresh;

procedure KeyPressHandler;
procedure show_note;
procedure show_days;
procedure delete_all;

// Timer defines
#define days_till_slag_attack                   (global_var(GVAR_SLAUGHTER_SLAG_TIME) - GAME_TIME_IN_DAYS)
#define refill_still_hours                      (24 + (global_var(GVAR_STILL_START) - GAME_TIME_IN_HOURS))
#define salvatore_guard_hours                   (get_sfall_global_int("masontmr") - GAME_TIME_IN_HOURS)

#define TIMER_OFF          (0)
#define TIMER_STILL        (1)
#define TIMER_SLAGS        (2)
#define TIMER_SALVATORE    (3)

#define NotePosX           (32)
#define NotePosY           (83)

variable timer_active, opennote, lastFrame;

procedure start begin
   if (game_loaded) then begin
      set_global_script_type(0);

      register_hook_proc(HOOK_GAMEMODECHANGE, GameModeChange_handler);
      register_hook_proc(HOOK_RESTTIMER, pipboy_note_refresh);

      if (get_sfall_global_int("masontmr") == 0) then
         register_hook_proc(HOOK_SETGLOBALVAR, SetGlobalVar_handler);
   end
end

procedure GameModeChange_handler begin
   if (global_var(GVAR_STILL_STATUS) == STILL_ACCEPT and refill_still_hours > 0) then begin
      timer_active := TIMER_STILL;
   end
   else if (global_var(GVAR_NEW_RENO_GUARD_ASSIGNMENT) == 2 and salvatore_guard_hours > 0) then begin
      timer_active := TIMER_SALVATORE;
      //if ((game_time_hour%100 >= 0) and (game_time_hour%100 <= 10)) then timer_active := timer_active +1;
   end
   else if (days_till_slag_attack > 0) then begin
      timer_active := TIMER_SLAGS;
   end
   else begin
      timer_active := TIMER_OFF;
   end

   if (get_game_mode bwand PIPBOY) then begin
      if (not(opennote) and timer_active > 0) then begin
         call show_note;
      end
   end
   else begin
      opennote := false;
   end
end

procedure SetGlobalVar_handler begin
   variable
      gvarIndx := get_sfall_arg,
      gvarState := get_sfall_arg;

   // Workaround, because the Mason timer is done via LVARs. Luckily they set a GVAR at the same time.
   if (gvarIndx == GVAR_NEW_RENO_GUARD_ASSIGNMENT) then begin
      if ((gvarState == 2) and (get_sfall_global_int("masontmr") == 0)) then begin
         set_sfall_global("masontmr", GAME_TIME_IN_HOURS + 24);
      end
   end
end

procedure pipboy_note_refresh begin
   //if (get_game_mode bwand PIPBOY) then begin
      if (opennote and timer_active > 0) then begin
         call show_days;
      end
      else if (opennote) then begin
         call delete_all;
      end
   //end
end

procedure show_note begin
   opennote := true;
   lastFrame := -1;

   variable pip2;
   if (timer_active == TIMER_STILL) then
      pip2 := "art\\intrface\\notestill.frm";
   else if (timer_active == TIMER_SALVATORE) then
      pip2 := "art\\intrface\\notemasn.frm";
   else
      pip2 := "art\\intrface\\notekarl.frm";

   interface_art_draw(0x1000000 + WINTYPE_PIPBOY, pip2, NotePosX, NotePosY);

   call show_days;
end

// Initial "days left" when opening the PipBoy:
procedure show_days begin
   variable timer, frame;

   if (timer_active == TIMER_STILL) then begin
      timer := refill_still_hours;
   end
   else if (timer_active == TIMER_SALVATORE) then begin
      timer := salvatore_guard_hours;
   end
   else if (timer_active == TIMER_SLAGS) then
      timer := days_till_slag_attack;

   //display_msg("timer: " + timer);

   frame := timer - 1;
   if (timer > 250) then frame := 250;
   if (frame == lastFrame) then return;

   if (timer <= 0) then begin
      timer_active := TIMER_OFF;
      call delete_all;
   end
   else begin
      interface_art_draw_frame(0x1000000 + WINTYPE_PIPBOY, "art\\intrface\\days.frm", NotePosX + 35, NotePosY + 97, frame);
      lastFrame := frame;
   end
end

procedure delete_all begin
   opennote := false;
   // Overwrite the pipboy note with a cropped pipboy window image
   interface_art_draw(WINTYPE_PIPBOY, "art\\intrface\\pip2a.frm", NotePosX, NotePosY);
end
